datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Stock {
  id      Int    @id @default(autoincrement())
  userId String
  symbol  String
  shares  Int
  user   User  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Transaction {
  id         Int      @id @default(autoincrement())
  userId    String
  symbol     String
  shares     Int
  price      Decimal  @db.Decimal(10, 2)
  transType TransType
  transacted DateTime @default(now())
  user      User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum TransType {
  BUY
  SELL
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  balance      Decimal        @default(10000.00) @db.Decimal(10, 2)
  accounts      Account[]
  sessions      Session[]
  stocks Stock[]
  transactions Transaction[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}